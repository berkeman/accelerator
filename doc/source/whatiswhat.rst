Basic Terminology and Operation
===============================

Exax is designed to be

 - fast.  The two main reasons is is fast are:

   - it will re-use earlier computations to save execution time

   - it is very easy to write simple but very powerful *parallel* programs

 - transparent and reproducible, meaning that

   - it is straightforward to validate that a specific output is the result of a specific run

   - there is an observable connection between results, source, and input data

 - and in addition it is easier to avoid common mistakes, because

   - there is no need for arbitrary intermediate filenames that can be mixed up

   - an unchanged program will re-run in a fraction of a second in order to validate a result


All source code in a project is separated into two types of files:
*build scripts* and *methods*.  While a build script is the "glue"
that controls execution on a higher level, methods are designed for
the core computations.  Exax also uses the term *job*, which means a
completed execution.  See below for a more detailed explanations.


What is a method?
-----------------

A *method* is a file containing Python code.  Methods are executed by
build scripts, and the build script can pass parameters to the method
at execution time.  Results generated by method execution can be read
back into the build script again.

Methods can execute in a single process, and it is also possible to do
simple (but powerful) parallel processing.  This works by using up to
three reserved function names in the method.

Methods are stored in Python packages, meaning a directory that has an
``__init__.py`` file.  The ``ax init`` will set ut a package called
``dev`` by default, but it is trivial to add more packages if
necessary.

Naming the method files is special.  A method has to start with the
prefix ``a_``.

.. note:: The method ``mymethod`` is stored in a file named
          ``a_mymethod.py``.

This seems unusual, but there are good reasons for it.


What is a job?
--------------

A *job* is a directory that is associated with the execution of a
method.  The directory contains input parameters, source code, and
output files from the execution.

In more detail, each job is associated with an id, such as for example
``dev-37``.  This i called the *job id*, while the directory is called
the *job directory*.

Job directories are stored in *workdirs*, which are nothing more than
ordinary directories.  The name and location of the workdirs are
defined in the configuration file.


What is a build script?
-----------------------

A build script is also a file containing Python code.  Build scripts
can execute *methods*, and thereby create *jobs*.  The main purpose of
the build script is to control the method execution, and a typical
project has one build script that calls a set of methods.

The name of a build script file is also special.  A build script has
to start with the prefix ``build_``.

.. note:: The build script ``myscript`` is stored in a file named
          ``build_myscript.py``.

.. note:: The default build script is just ``build.py``.
